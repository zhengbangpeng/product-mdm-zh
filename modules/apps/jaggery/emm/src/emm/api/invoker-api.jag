<%
/*
 * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var uri = request.getRequestURI();
var uriMatcher = new URIMatcher(String(uri));

var log = new Log("api/invoker-api.jag");

var constants = require("/modules/constants.js");
var mdmProps = require('/config/mdm-props.js').config();
var serviceInvokers = require("/modules/backend-service-invoker.js").backendServiceInvoker;

var result;

if (uriMatcher.match("/{context}/api/invoker/execute/")) {
    var method = request.getContent().actionMethod;
    var targetURL = mdmProps.httpsURL + request.getContent().actionUrl;
    var payload = request.getContent().actionPayload;
    if(method == undefined && payload == undefined){
        method = parse(request.getContent()).actionMethod;
        targetURL = mdmProps.httpsURL + parse(request.getContent()).actionUrl;
        payload = parse(request.getContent()).actionPayload;
    }
    try {

        switch (method) {
            case constants.HTTP_GET:
                var responseData = serviceInvokers.XMLHttp.get(
                        targetURL, function (responsePayload) {
                            response.status = 200;
                            response.content =  responsePayload;
                        },
                        function (responsePayload) {
                            response.status = responsePayload.status;
                            response.content =  responsePayload.responseText;
                        });
                break;
            case constants.HTTP_POST:
                var responseData = serviceInvokers.XMLHttp.post(
                        targetURL, payload, function (responsePayload) {
                            response.status = 200;
                            response.content =  responsePayload;
                        },
                        function (responsePayload) {
                            response.status = responsePayload.status;
                            response.content =  responsePayload.responseText;
                        });
                break;
            case constants.HTTP_PUT:
                var responseData = serviceInvokers.XMLHttp.put(
                        targetURL, payload, function (responsePayload) {
                            response.status = 200;
                            response.content =  responsePayload;
                        },
                        function (responsePayload) {
                            response.status = responsePayload.status;
                            response.content =  responsePayload.responseText;
                        });
                break;
            case constants.HTTP_DELETE:
                var responseData =
                        serviceInvokers.XMLHttp.delete(
                                targetURL, function (responsePayload) {
                                    response.status = 200;
                                    response.content =  responsePayload;
                                },
                                function (responsePayload) {
                                    response.status = responsePayload.status;
                                    response.content =  responsePayload.responseText;
                                });
                break;
        }
    } catch (e) {
        log.error("Exception occurred while accessing sevices", e);
    }
}

%>
